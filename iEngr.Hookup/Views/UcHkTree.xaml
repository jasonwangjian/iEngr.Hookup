<UserControl x:Class="iEngr.Hookup.Views.UcHkTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:iEngr.Hookup.Views"
             xmlns:cv="clr-namespace:iEngr.Hookup.Converters"
             xmlns:vm="clr-namespace:iEngr.Hookup.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <!-- 定义各种编辑器模板 -->
        <DataTemplate x:Key="StringEditorTemplate">
            <TextBox Text="{Binding Value}" Width="150" Margin="2"/>
        </DataTemplate>

        <DataTemplate x:Key="BooleanEditorTemplate">
            <CheckBox IsChecked="{Binding Value}" Margin="2"/>
        </DataTemplate>

        <DataTemplate x:Key="EnumEditorTemplate">
            <ComboBox ItemsSource="{Binding Options}" 
                  SelectedItem="{Binding Value}" 
                  Width="150" Margin="2"/>
        </DataTemplate>

        <DataTemplate x:Key="EnumItemEditorTemplate">
            <ComboBox ItemsSource="{Binding GeneralItems}" 
                  DisplayMemberPath ="Name"
                  SelectedValuePath="Code"
                  SelectedValue="{Binding Value}" 
                  Width="150" Margin="2"/>
        </DataTemplate>

        <BitmapImage x:Key="ConfigIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/ConfigIcon.ico"/>
        <BitmapImage x:Key="DefaultIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/DefaultIcon.ico"/>
        <BitmapImage x:Key="UnknownIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/UnknownIcon.png"/>
        <BitmapImage x:Key="PictureIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/PictureIcon.png"/>
        <BitmapImage x:Key="BomIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/BomIcon.png"/>
        <BitmapImage x:Key="PictureInheritIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/PictureInheritIcon.png"/>
        <BitmapImage x:Key="BomInheritIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/BomInheritIcon.png"/>
        <BitmapImage x:Key="TagLabelIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/TagLabelIcon.ico"/>
        <BitmapImage x:Key="CopyIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/CopyIcon.png"/>
        <BitmapImage x:Key="CutIcon" UriSource="pack://application:,,,/iEngr.Hookup;component/Resources/CutIcon.png"/>

        <cv:PositiveNumberToVisibilityConverter x:Key="PositiveNumberToVisibilityConverter"/>
        <cv:NullToVisibilityConverter  x:Key="NullToVisibilityConverter"/>
        <cv:NoEmptyToVisibilityConverter  x:Key="NoEmptyToVisibilityConverter"/>
        <cv:CmbNodeToVisibilityConverter  x:Key="CmbNodeToVisibilityConverter"/>
        <cv:TextNodeToVisibilityConverter  x:Key="TextNodeToVisibilityConverter"/>
        <cv:NodeNameToValueConverter  x:Key="NodeNameToValueConverter"/>
        <cv:DiagIDToCountConverter  x:Key="DiagIDToCountConverter"/>
        <cv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <cv:NegativeNumberToVisibilityConverter x:Key="NegativeNumberToVisibilityConverter"/>
        <cv:BoolToRedConverter x:Key="BoolToRedConverter"/>

        <cv:PropertyTypeToEditorTemplateConverter x:Key="PropertyEditorConverter"
            StringTemplate="{StaticResource StringEditorTemplate}"
            BooleanTemplate="{StaticResource BooleanEditorTemplate}"
            EnumTemplate="{StaticResource EnumEditorTemplate}"
            EnumItemTemplate="{StaticResource EnumItemEditorTemplate}"/>


        <!-- 上下文菜单 -->
        <ContextMenu x:Key="TreeViewContextMenu">
            <!-- 展开折叠功能 -->
            <MenuItem Header="展开所有" 
                      Command="{Binding PlacementTarget.Tag.ExpandAllCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      InputGestureText="Ctrl+E"/>
            <MenuItem Header="折叠所有" 
                      Command="{Binding PlacementTarget.Tag.CollapseAllCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      InputGestureText="Ctrl+W"/>
            <Separator/>
            <!-- 移动功能 -->
            <MenuItem Header="上移" 
                      Command="{Binding PlacementTarget.Tag.MoveUpCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="下移" 
                      Command="{Binding PlacementTarget.Tag.MoveDownCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <Separator/>
            <!-- 复制剪切粘贴功能 -->
            <MenuItem Header="复制" 
                      Command="{Binding PlacementTarget.Tag.CopyCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      InputGestureText="Ctrl+C"/>
            <MenuItem Header="剪切" 
                      Command="{Binding PlacementTarget.Tag.CutCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      InputGestureText="Ctrl+X"/>
            <MenuItem Header="粘贴" 
                      Command="{Binding PlacementTarget.Tag.PasteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      InputGestureText="Ctrl+V"/>
            <Separator/>
            <MenuItem Header="新建" 
                      Command="{Binding PlacementTarget.Tag.StartEditNewCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="编辑" 
                      Command="{Binding PlacementTarget.Tag.StartEditCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="删除" 
                      Command="{Binding PlacementTarget.Tag.DeleteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      ToolTip="删除此节点及其所有子节点"/>
            <MenuItem Header="单点删除" 
                      Command="{Binding PlacementTarget.Tag.DeleteSingleCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"
                      ToolTip="仅删除此节点，所有子节点移动到父节点"/>
            <!--<Separator/>
            <MenuItem Header="分配图形" 
                      Command="{Binding PlacementTarget.Tag.PictureSetCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="删除图形" 
                      Command="{Binding PlacementTarget.Tag.PictureDelCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>-->
            <Separator/>
            <MenuItem Header="新增Diag" 
                      Command="{Binding PlacementTarget.Tag.DiagramNewCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="清空Diag" 
                      Command="{Binding PlacementTarget.Tag.DiagramDelCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="继承Diag" 
                      Command="{Binding PlacementTarget.Tag.DiagramNullCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="设置标签" 
                      Command="{Binding PlacementTarget.Tag.EditPropertiesCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
            <MenuItem Header="刷新节点" 
                      Command="{Binding PlacementTarget.Tag.NodeReloadCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding}"/>
        </ContextMenu>

        <!-- TreeViewItem样式 -->
        <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
            <Setter Property="ContextMenu" Value="{StaticResource TreeViewContextMenu}"/>
            <Setter Property="Tag" Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType=TreeView}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="2"/>
        </Style>

        <!-- 显示模板 -->
        <DataTemplate x:Key="DisplayTemplate">
            <StackPanel Orientation="Horizontal" Margin="2">
                <!-- 图标 -->
                <Image cv:IconResourceHelper.ResourceKey="{Binding NodeItem.IconName}" 
                       Width="16" Height="16" Margin="0,0,5,0" />
                <Image Width="16" Height="16" Margin="2,0,2,0"
                   Source="{StaticResource CutIcon}"
                   Visibility="{Binding IsCutOperation,  Converter={StaticResource BoolToVisibilityConverter}}">
                </Image>
               <Image Width="16" Height="16" Margin="2,0,2,0"
                   Source="{StaticResource CopyIcon}"
                   Visibility="{Binding IsCopyOperation,  Converter={StaticResource BoolToVisibilityConverter}}">
                </Image>
                <!--<Image Width="16" Height="16" Margin="2,0,2,0"
                   Source="{StaticResource PictureIcon}"
                   Visibility="{Binding PicturePath,  Converter={StaticResource NoEmptyToVisibilityConverter}}">
                </Image>
                <Image Width="16" Height="16" Margin="2,0,2,0"
                   Source="{StaticResource PictureInheritIcon}"
                   Visibility="{Binding IsInheritPictureActive,  Converter={StaticResource BoolToVisibilityConverter}}">
                </Image>-->
                <TextBlock Text="{Binding DiagID, Converter={StaticResource DiagIDToCountConverter}}" 
                           FontWeight="Bold" Foreground="Blue"
                           Visibility="{Binding DiagID, Converter={StaticResource NoEmptyToVisibilityConverter}}"
                           VerticalAlignment="Center"/>
                <Image Width="16" Height="16" Margin="2,0,2,0"
                   Source="{StaticResource BomIcon}"
                   Visibility="{Binding DiagID, Converter={StaticResource NoEmptyToVisibilityConverter}}">
                </Image>
                <TextBlock Text="{Binding InheritDiagID, Converter={StaticResource DiagIDToCountConverter}}" 
                           FontWeight="Bold" Foreground="Blue"
                           Visibility="{Binding IsInheritDiagIDActive, Converter={StaticResource BoolToVisibilityConverter}}"
                           VerticalAlignment="Center"/>
                <Image Width="16" Height="16" Margin="2,0,2,0"
                   Source="{StaticResource BomInheritIcon}"
                   Visibility="{Binding IsInheritDiagIDActive,  Converter={StaticResource BoolToVisibilityConverter}}">
                </Image>
                <TextBlock Text="{Binding NodeName, Converter={StaticResource NodeNameToValueConverter}}" 
                           Visibility="{Binding  Converter={StaticResource CmbNodeToVisibilityConverter}}"
                           FontWeight="Bold" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding NodeValue}" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding Name}" 
                           Foreground="{Binding IsDuplicatedName, Converter={StaticResource BoolToRedConverter}}"
                           Visibility="{Binding  Converter={StaticResource TextNodeToVisibilityConverter}}"
                           VerticalAlignment="Center"/>

                <!-- 显示的属性 -->
                <TextBlock Text="{Binding DisplayProperties}" 
                   Margin="5,2,0,0"
                   TextWrapping="Wrap"/>
                <TextBlock Text="{Binding DisplayInheritProperties}" 
                   FontStyle="Italic"
                   Margin="5,2,0,0"
                   TextWrapping="Wrap"/>

            </StackPanel>
        </DataTemplate>

        <!-- 编辑模板 -->
        <DataTemplate x:Key="EditTemplate">
            <StackPanel Orientation="Horizontal" Margin="2">
                <!-- 编辑状态指示器 -->
                <Image cv:IconResourceHelper.ResourceKey="{Binding NodeItem.IconName}" 
                       Width="16" Height="16" Margin="0,0,5,0" />
                <TextBlock Text="✎" Foreground="Black" FontSize="10" Margin="0,0,3,0"
                   Visibility="{Binding IsEditing, Converter={StaticResource BoolToVisibilityConverter}}"
                   ToolTip="正在编辑"/>
                <!-- 功能编辑 -->
                <ComboBox ItemsSource="{Binding NodeItems}" 
                      DisplayMemberPath ="Name"
                      SelectedValuePath="Code"
                      SelectedValue="{Binding EditNodeName}" 
                      Visibility="{Binding  Converter={StaticResource CmbNodeToVisibilityConverter}}"
                      Width="80" Margin="0,0,5,0"/>
                <TextBox Text="{Binding EditName, UpdateSourceTrigger=PropertyChanged}" 
                      Visibility="{Binding  Converter={StaticResource TextNodeToVisibilityConverter}}"
                      Width="100" Margin="0,0,5,0"/>
                <!--<TextBlock Text="{Binding ErrMsgName}" Foreground="Red" FontSize="9" VerticalAlignment="Center" Margin="0,0,5,0"
                           Visibility="{Binding ErrMsgName, Converter={StaticResource NoEmptyToVisibilityConverter}}"/>-->

                <!-- 确认按钮 -->
                <Button Content="✓" Width="20" Height="20" Margin="2,0"
                        Command="{Binding DataContext.ConfirmEditCommand, RelativeSource={RelativeSource AncestorType=TreeView}}"
                        CommandParameter="{Binding}"
                        ToolTip="确认修改"
                        Background ="White"
                        Foreground="Black"/>
                <!-- 取消按钮 -->
                <Button Content="✗" Width="20" Height="20" Margin="2,0"
                        Command="{Binding DataContext.CancelEditCommand, RelativeSource={RelativeSource AncestorType=TreeView}}"
                        CommandParameter="{Binding}"
                        ToolTip="取消编辑"
                        Background ="White"
                        Foreground="Black"/>
            </StackPanel>
        </DataTemplate>


        <!-- 主要的HierarchicalDataTemplate -->
        <HierarchicalDataTemplate DataType="{x:Type vm:HkTreeItem}" 
                              ItemsSource="{Binding Children}">
            <Border x:Name="templateBorder">
                <ContentPresenter x:Name="contentPresenter" Content="{Binding}">
                <ContentPresenter.Style>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="ContentTemplate" Value="{StaticResource DisplayTemplate}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsEditing}" Value="True">
                                <Setter Property="ContentTemplate" Value="{StaticResource EditTemplate}"/>
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </ContentPresenter.Style>
            </ContentPresenter>
            </Border>
            <HierarchicalDataTemplate.Triggers>
                <!-- 添加IsHighlighted的触发器 -->
                <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                    <Setter TargetName="templateBorder" Property="Background" Value="Yellow"/>
                </DataTrigger>
            </HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <DockPanel Grid.Row="1" Grid.Column="1">
            <!-- 状态栏 -->
            <StatusBar DockPanel.Dock="Bottom" ItemsSource="{Binding StatusMessages.Items}">
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>

                <StatusBar.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Value}" Foreground="Red"  Margin="0,0,5,0"/>
                        </StackPanel>
                    </DataTemplate>
                </StatusBar.ItemTemplate>
            </StatusBar>

            <!-- TreeView -->
            <TreeView x:Name="tvHk" ItemsSource="{Binding TreeItems}" BorderThickness="0"
                      SelectedItemChanged="TreeView_SelectedItemChanged"
                      PreviewMouseRightButtonDown="TreeView_PreviewMouseRightButtonDown"
                      KeyDown="TreeView_KeyDown"
                      >
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource TreeViewItemStyle}">
                        <EventSetter Event="PreviewMouseRightButtonDown" Handler="TreeViewItem_PreviewMouseRightButtonDown"/>
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>
        </DockPanel>
    </Grid>
</UserControl>
